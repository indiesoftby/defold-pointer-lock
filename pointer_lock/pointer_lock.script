local pointer = require("pointer_lock.pointer")

go.property("acquire_input_focus", true)
go.property("click_action_id", hash("touch"))
go.property("unlock_action_id", hash("key_esc"))

--- HTML5 only.
-- For web platforms, you cannot request mouse lock outside of “user interactions”, 
-- so to get that to work we should use the html5.set_interaction_listener(callback) 
-- function to request the mouse lock for web platforms.
local function lock_mouse_on_interaction(self)
    if not pointer.locked then
        window.set_mouse_lock(true)
    end
end

function init(self)
    if self.acquire_input_focus then
        msg.post(".", "acquire_input_focus")
    end

    pointer.locked = window.get_mouse_lock()

    if html5 then
        html5.set_interaction_listener(lock_mouse_on_interaction)
    end
end

function final(self)
    if html5 then
        html5.set_interaction_listener(nil)
    end
end

function update(self, dt)
    if html5 then
        -- If user presses "esc" to exit pointer lock then web browsers don't fire "input" event.
        -- That's why we have to check the pointer lock status in the update loop.
        pointer.update_lock_state()
    end
end

function on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
    if html5 then
        --
        -- HTML5
        --
        pointer.update_lock_state()

        if pointer.locked and action_id == self.unlock_action_id and action.released then
            window.set_mouse_lock(false)

            return true
        end
    else
        --
        -- Desktop
        --

        if action_id == self.unlock_action_id and action.released then
            local skip_events = pointer.locked
            pointer.locked = false
            window.set_mouse_lock(false)

            return skip_events
        elseif action_id == self.click_action_id and action.released then
            if not pointer.locked then
                pointer.locked = true
                window.set_mouse_lock(true)

                return true
            end
        end
    end
end
